// Code generated by mockery v2.53.4. DO NOT EDIT.

package am

import mock "github.com/stretchr/testify/mock"

// MockCommandSubscriber is an autogenerated mock type for the CommandSubscriber type
type MockCommandSubscriber struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields: topicName, handler, options
func (_m *MockCommandSubscriber) Subscribe(topicName string, handler CommandMessageHandler, options ...SubscriberOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topicName, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, CommandMessageHandler, ...SubscriberOption) error); ok {
		r0 = rf(topicName, handler, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCommandSubscriber creates a new instance of MockCommandSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandSubscriber {
	mock := &MockCommandSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
