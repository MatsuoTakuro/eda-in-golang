// Code generated by mockery v2.53.4. DO NOT EDIT.

package am

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRawMessageHandler is an autogenerated mock type for the RawMessageHandler type
type MockRawMessageHandler[I AckableMessage] struct {
	mock.Mock
}

// HandleMessage provides a mock function with given fields: ctx, msg
func (_m *MockRawMessageHandler[I]) HandleMessage(ctx context.Context, msg AckableRawMessage) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for HandleMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AckableRawMessage) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRawMessageHandler creates a new instance of MockRawMessageHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRawMessageHandler[I AckableMessage](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRawMessageHandler[I] {
	mock := &MockRawMessageHandler[I]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
