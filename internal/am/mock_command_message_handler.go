// Code generated by mockery v2.53.4. DO NOT EDIT.

package am

import (
	context "context"
	ddd "eda-in-golang/internal/ddd"

	mock "github.com/stretchr/testify/mock"
)

// MockCommandMessageHandler is an autogenerated mock type for the CommandMessageHandler type
type MockCommandMessageHandler struct {
	mock.Mock
}

// HandleMessage provides a mock function with given fields: ctx, msg
func (_m *MockCommandMessageHandler) HandleMessage(ctx context.Context, msg CommandMessage) (ddd.Reply, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for HandleMessage")
	}

	var r0 ddd.Reply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CommandMessage) (ddd.Reply, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CommandMessage) ddd.Reply); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddd.Reply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, CommandMessage) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockCommandMessageHandler creates a new instance of MockCommandMessageHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommandMessageHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommandMessageHandler {
	mock := &MockCommandMessageHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
