// Code generated by mockery v2.53.4. DO NOT EDIT.

package application

import (
	context "context"
	commands "eda-in-golang/modules/ordering/internal/application/commands"

	mock "github.com/stretchr/testify/mock"
)

// MockCommands is an autogenerated mock type for the Commands type
type MockCommands struct {
	mock.Mock
}

// ApproveOrder provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) ApproveOrder(ctx context.Context, cmd commands.ApproveOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for ApproveOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.ApproveOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelOrder provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) CancelOrder(ctx context.Context, cmd commands.CancelOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.CancelOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteOrder provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) CompleteOrder(ctx context.Context, cmd commands.CompleteOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CompleteOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.CompleteOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) CreateOrder(ctx context.Context, cmd commands.CreateOrder) (string, bool, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.CreateOrder) (string, bool, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, commands.CreateOrder) string); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, commands.CreateOrder) bool); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, commands.CreateOrder) error); ok {
		r2 = rf(ctx, cmd)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadyOrder provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) ReadyOrder(ctx context.Context, cmd commands.ReadyOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for ReadyOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.ReadyOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RejectOrder provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) RejectOrder(ctx context.Context, cmd commands.RejectOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for RejectOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commands.RejectOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCommands creates a new instance of MockCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommands {
	mock := &MockCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
